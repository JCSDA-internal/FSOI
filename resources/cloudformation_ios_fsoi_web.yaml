---
Description: JCSDA's IOS FSOI Web Application
AWSTemplateFormatVersion: '2010-09-09'

Resources:

  #
  # IAM ROLES
  #

  # Role for the lambda function
  FsoiLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      RoleName: fsoi_lambda_role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Role for the batch jobs
  FsoiBatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - batch.amazonaws.com
                - ecs.amazonaws.com
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      RoleName: fsoi_batch_role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole


  #
  # IAM Policies
  #

  # Policy to allow read access to s3://fsoi
  AllowReadS3Fsoi:
    Type: AWS::IAM::Policy
    DependsOn:
      - FsoiBatchRole
    Properties:
      PolicyName: allow_read_s3_fsoi
      Roles:
        - fsoi_batch_role
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
            - s3:GetObjectAcl
            - s3:GetObject
            - s3:ListBucket
          Resource:
            - arn:aws:s3:::fsoi/*
            - arn:aws:s3:::fsoi
        - Effect: Allow
          Action: s3:HeadBucket
          Resource:
            - arn:aws:s3:::fsoi

  # Policy to allow CRUD operations on the DynamoDB table for requests
  AllowCrudDynamodbFsoiRequests:
    Type: AWS::IAM::Policy
    DependsOn:
      - FsoiBatchRole
      - FsoiLambdaRole
    Properties:
      PolicyName: allow_crud_dynamodb_fsoi_requests
      Roles:
        - fsoi_batch_role
        - fsoi_lambda_role
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - dynamodb:BatchWriteItem
          - dynamodb:ConditionCheckItem
          - dynamodb:PutItem
          - dynamodb:DescribeTable
          - dynamodb:DeleteItem
          - dynamodb:GetItem
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:UpdateItem
          - dynamodb:UpdateTable
          - dynamodb:GetRecords
          Resource:
            - arn:aws:dynamodb:us-east-1:469205354006:table/fsoi_requests
            - arn:aws:dynamodb:us-east-1:469205354006:table/fsoi_requests/stream/*
        - Effect: Allow
          Action: dynamodb:ListTables
          Resource:
            - arn:aws:dynamodb:us-east-1:*:*

  # Policy to allow read/write to s3://fsoi-image-cache
  AllowRwS3FsoiImageCache:
    Type: AWS::IAM::Policy
    DependsOn:
      - FsoiBatchRole
      - FsoiLambdaRole
    Properties:
      PolicyName: allow_rw_s3_fsoi_image_cache
      Roles:
        - fsoi_batch_role
        - fsoi_lambda_role
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:PutAnalyticsConfiguration
              - s3:GetObjectVersionTagging
              - s3:CreateBucket
              - s3:ReplicateObject
              - s3:GetObjectAcl
              - s3:DeleteBucketWebsite
              - s3:PutLifecycleConfiguration
              - s3:GetObjectVersionAcl
              - s3:PutObjectTagging
              - s3:DeleteObject
              - s3:DeleteObjectTagging
              - s3:GetBucketPolicyStatus
              - s3:GetBucketWebsite
              - s3:PutReplicationConfiguration
              - s3:DeleteObjectVersionTagging
              - s3:GetBucketNotification
              - s3:PutBucketCORS
              - s3:GetReplicationConfiguration
              - s3:ListMultipartUploadParts
              - s3:PutObject
              - s3:GetObject
              - s3:PutBucketNotification
              - s3:PutBucketLogging
              - s3:GetAnalyticsConfiguration
              - s3:GetObjectVersionForReplication
              - s3:GetLifecycleConfiguration
              - s3:ListBucketByTags
              - s3:GetInventoryConfiguration
              - s3:GetBucketTagging
              - s3:PutAccelerateConfiguration
              - s3:DeleteObjectVersion
              - s3:GetBucketLogging
              - s3:ListBucketVersions
              - s3:ReplicateTags
              - s3:RestoreObject
              - s3:ListBucket
              - s3:GetAccelerateConfiguration
              - s3:GetBucketPolicy
              - s3:PutEncryptionConfiguration
              - s3:GetEncryptionConfiguration
              - s3:GetObjectVersionTorrent
              - s3:AbortMultipartUpload
              - s3:PutBucketTagging
              - s3:GetBucketRequestPayment
              - s3:GetObjectTagging
              - s3:GetMetricsConfiguration
              - s3:DeleteBucket
              - s3:PutBucketVersioning
              - s3:GetBucketPublicAccessBlock
              - s3:ListBucketMultipartUploads
              - s3:PutMetricsConfiguration
              - s3:PutObjectVersionTagging
              - s3:GetBucketVersioning
              - s3:GetBucketAcl
              - s3:PutInventoryConfiguration
              - s3:GetObjectTorrent
              - s3:PutBucketWebsite
              - s3:PutBucketRequestPayment
              - s3:GetBucketCORS
              - s3:GetBucketLocation
              - s3:ReplicateDelete
              - s3:GetObjectVersion
            Resource:
              - arn:aws:s3:::*/*
              - arn:aws:s3:::fsoi-image-cache
          - Effect: Allow
            Action:
              - s3:GetAccountPublicAccessBlock
              - s3:ListAllMyBuckets
              - s3:HeadBucket
            Resource: '*'

  # Policy to allow updates to API Gateway websocket clients
  AllowPostExecuteApi:
    Type: AWS::IAM::Policy
    DependsOn:
      - FsoiBatchRole
      - FsoiLambdaRole
    Properties:
      PolicyName: allow_post_execute_api
      Roles:
        - fsoi_batch_role
        - fsoi_lambda_role
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: execute-api:*
            Resource: arn:aws:execute-api:us-east-1:469205354006:*/*/*/*

  # Policy to allow lambda to submit batch jobs
  AllowSubmitBatchJobs:
    Type: AWS::IAM::Policy
    DependsOn:
      - FsoiLambdaRole
    Properties:
      PolicyName: allow_submit_batch_jobs
      Roles:
        - fsoi_lambda_role
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: batch:SubmitJob
            Effect: Allow
            Resource:
              - arn:aws:batch:us-east-1:469205354006:job-definition/fsoi_job:*
              - arn:aws:batch:us-east-1:469205354006:job-queue/fsoi_queue

  #
  # DYNAMODB
  #

  # Create the DynamoDB Table
  DynamoTableFsoiRequests:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: req_hash
          AttributeType: S
      KeySchema:
        - AttributeName: req_hash
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: fsoi_requests


  #
  # API GATEWAY
  #
  # TODO: The websocket protocol is not currently supported in CloudFormation (2019-Jan-16)


  #
  # LAMBDA
  #

  # Function to handle requests from the API Gateway
  LambdaFunctionHandleFsoiRequests:
    Type: AWS::Lambda::Function
    DependsOn:
      - FsoiLambdaRole
    Properties:
      FunctionName: fsoi_request_handler
      Handler: lambda_wrapper.main
      Role: arn:aws:iam::469205354006:role/fsoi_lambda_role
      Code:
        S3Bucket: jcsda-scratch
        S3Key: fsoi_lambda.zip
      Runtime: python3.6
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          CACHE_BUCKET: fsoi-image-cache
          FSOI_ROOT_DIR: /tmp/fsoi
          REGION: us-east-1


  #
  # BATCH
  #

  # Security group
  BatchEnvSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow egress only
      SecurityGroupIngress:
        - CidrIp: 127.0.0.1/32
          IpProtocol: -1
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
          FromPort: -1
          ToPort: -1
      VpcId: vpc-4a9db231

  # Subnet
  BatchEnvSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: vpc-4a9db231
      CidrBlock: 172.31.96.0/20
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: true

  # Compute environment
  BatchEnvFsoi:
    Type: AWS::Batch::ComputeEnvironment
    DependsOn:
      - BatchEnvSecurityGroup
      - BatchEnvSubnet
    Properties:
      Type: MANAGED
      ServiceRole: arn:aws:iam::469205354006:role/service-role/AWSBatchServiceRole
      ComputeEnvironmentName: fsoi_env
      ComputeResources:
        MinvCpus: 0
        MaxvCpus: 24
        DesiredvCpus: 0
        SecurityGroupIds:
          - Ref: BatchEnvSecurityGroup
        Type: EC2
        InstanceTypes:
          - optimal
        InstanceRole: arn:aws:iam::469205354006:instance-profile/ecsInstanceRole
        Subnets:
          - Ref: BatchEnvSubnet
      State: ENABLED

  # Job queue
  BatchQueueFsoi:
    Type: AWS::Batch::JobQueue
    DependsOn:
      - BatchEnvFsoi
    Properties:
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: fsoi_env
      State: ENABLED
      Priority: 100
      JobQueueName: fsoi_queue

  # Job definition
  BatchJobDefinitionFsoi:
    Type: AWS::Batch::JobDefinition
    DependsOn:
      - FsoiBatchRole
    Properties:
      Type: container
      JobDefinitionName: fsoi_job
      ContainerProperties:
        Command:
          - python
          - /batch_wrapper.py
          - Ref::request
        Memory: 8192
        JobRoleArn:
          Ref: FsoiBatchRole
        Vcpus: 2
        Image: 469205354006.dkr.ecr.us-east-1.amazonaws.com/fsoi-batch
