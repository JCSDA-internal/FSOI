---
Description: JCSDA's IOS FSOI Data Ingest
AWSTemplateFormatVersion: '2010-09-09'

Resources:

  #
  # IAM ROLES
  #

  # Role for the lambda function
  FsoiIngestLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      RoleName: fsoi_ingest_lambda_role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Role for the batch jobs
  FsoiIngestBatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - batch.amazonaws.com
                - ecs.amazonaws.com
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      RoleName: fsoi_ingest_batch_role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole


  #
  # IAM POLICIES
  #

  # Policy to allow read/write access to s3://fsoi and s3://fsoi-navy-ingest
  AllowReadWriteS3Fsoi:
    Type: AWS::IAM::Policy
    DependsOn:
      - FsoiIngestBatchRole
      - FsoiIngestLambdaRole
    Properties:
      PolicyName: allow_read_write_s3_fsoi_ingest
      Roles:
        - fsoi_ingest_batch_role
        - fsoi_ingest_lambda_role
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
            - s3:GetObjectAcl
            - s3:GetObject
            - s3:ListBucket
            - s3:PutObject
            - s3:PutObjectTagging
            - s3:PutObjectVersionTagging
            - s3:PutObjectAcl
            - s3:PutObjectVersionAcl
            - s3:DeleteObject
            - s3:DeleteObjectVersion
            - s3:DeleteObjectTagging
            - s3:DeleteObjectVersionTagging
          Resource:
            - arn:aws:s3:::fsoi/*
            - arn:aws:s3:::fsoi
            - arn:aws:s3:::fsoi-navy-ingest/*
            - arn:aws:s3:::fsoi-navy-ingest
        - Effect: Allow
          Action: s3:HeadBucket
          Resource:
            - arn:aws:s3:::fsoi
            - arn:aws:s3:::fsoi-navy-ingest

  # Policy to allow lambda to submit batch jobs
  AllowFsoiIngestSubmitBatchJobs:
    Type: AWS::IAM::Policy
    DependsOn:
      - FsoiIngestLambdaRole
    Properties:
      PolicyName: allow_fsoi_ingest_submit_batch_jobs
      Roles:
        - fsoi_ingest_lambda_role
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: batch:SubmitJob
            Effect: Allow
            Resource:
              - arn:aws:batch:us-east-1:469205354006:job-definition/fsoi_ingest_nrl_job:*
              - arn:aws:batch:us-east-1:469205354006:job-queue/fsoi_ingest_queue

  #
  # LAMBDA
  #

  # Function to handle requests from the API Gateway
  LambdaFunctionFsoiIngestNrl:
    Type: AWS::Lambda::Function
    DependsOn:
      - FsoiIngestLambdaRole
    Properties:
      FunctionName: fsoi_ingest_nrl
      Handler: ingest_navy.main
      Role: arn:aws:iam::469205354006:role/fsoi_ingest_lambda_role
      Code:
        S3Bucket: jcsda-scratch
        S3Key: fsoi_lambda.zip
      Runtime: python3.6
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          BUCKET_NAME: fsoi-navy-ingest
          FTP_HOST: ftp-ex.nrlmry.navy.mil
          LAG_IN_DAYS: 4
          REMOTE_FILE_TEMPLATE: receive/obimpact_gemops_DATE00.bz2
          OUTPUT_URL_TEMPLATE: s3://fsoi/intercomp/hdf5/NRL/NRL.dry.DATE00.h5


  #
  # CLOUDWATCH EVENTS, METRICS, and ALARMS
  #

  # Run Lambda function once daily
  DailyFsoiIngestNrlEvent:
    Type: AWS::Events::Rule
    DependsOn:
      - LambdaFunctionFsoiIngestNrl
    Properties:

      Description: Ingest NRL data daily at 18:45 UTC
      ScheduleExpression: cron(45 18 * * ? *)
      Name: fsoi_ingest_nrl_daily
      State: ENABLED
      Targets:
        - Arn: arn:aws:lambda:us-east-1:469205354006:function:fsoi_ingest_nrl
          Id: fsoi_ingest_nrl

  # Allow CloudWatch Events to invoke the Lambda function
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: LambdaFunctionFsoiIngestNrl
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: arn:aws:events:us-east-1:469205354006:rule/fsoi_ingest_nrl_daily

  # Create a metric filter that will parse the downloaded file size from the log files
  FsoiIngestNrlDownloadSizeMetric:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: /aws/lambda/fsoi_ingest_nrl
      FilterPattern: "{ $.ok IS TRUE }"
      MetricTransformations:
        - MetricName: fsoi_ingest_nrl_download_size
          MetricValue: "$.size"
          MetricNamespace: FSOI

  # Create a topic for FSOI alarms and subscribe my email
  FsoiAlarmTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: fsoi_alarm
      Subscription:
        - Endpoint: hahnd@ucar.edu
          Protocol: email

  # Send an alarm when
  FsoiIngestNrlAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn:
      - FsoiAlarmTopic
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - Ref: FsoiAlarmTopic
      InsufficientDataActions:
        - Ref: FsoiAlarmTopic
      AlarmName: fsoi_ingest_nrl_alarm
      ComparisonOperator: LessThanOrEqualToThreshold
      DatapointsToAlarm: 1
      EvaluationPeriods: 1
      MetricName: fsoi_ingest_nrl_download_size
      Namespace: FSOI
      Period: 86400
      Statistic: Maximum
      Threshold: 20971520
      TreatMissingData: breaching
      Unit: Bytes


  #
  # BATCH
  #

  # Security group
  BatchEnvSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow egress only
      SecurityGroupIngress:
        - CidrIp: 127.0.0.1/32
          IpProtocol: -1
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
          FromPort: -1
          ToPort: -1
      VpcId: vpc-4a9db231

  # Subnet
  BatchEnvSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: vpc-4a9db231
      CidrBlock: 172.31.112.0/20
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: true

  # Compute environment
  BatchEnvFsoiIngest:
    Type: AWS::Batch::ComputeEnvironment
    DependsOn:
      - BatchEnvSecurityGroup
      - BatchEnvSubnet
    Properties:
      Type: MANAGED
      ServiceRole: arn:aws:iam::469205354006:role/service-role/AWSBatchServiceRole
      ComputeEnvironmentName: fsoi_ingest_env
      ComputeResources:
        MinvCpus: 0
        MaxvCpus: 64
        DesiredvCpus: 0
        SecurityGroupIds:
          - Ref: BatchEnvSecurityGroup
        Type: EC2
        InstanceTypes:
          - optimal
        InstanceRole: arn:aws:iam::469205354006:instance-profile/ecsInstanceRole
        Subnets:
          - Ref: BatchEnvSubnet
      State: ENABLED

  # Job queue
  BatchQueueFsoiIngest:
    Type: AWS::Batch::JobQueue
    DependsOn:
      - BatchEnvFsoiIngest
    Properties:
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: fsoi_ingest_env
      State: ENABLED
      Priority: 100
      JobQueueName: fsoi_ingest_queue

  # Job definition
  BatchJobDefinitionFsoiIngest:
    Type: AWS::Batch::JobDefinition
    DependsOn:
      - FsoiIngestBatchRole
    Properties:
      Type: container
      JobDefinitionName: fsoi_ingest_nrl_job
      ContainerProperties:
        Command:
          - python
          - /convert_navy.py
          - --input
          - Ref::input_url
          - --output
          - Ref::output_url
        Memory: 4096
        JobRoleArn:
          Ref: FsoiIngestBatchRole
        Vcpus: 2
        Image: 469205354006.dkr.ecr.us-east-1.amazonaws.com/fsoi-batch
